import os,sys,time,datetime
import h5py,cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from scipy.interpolate import rbf,griddata
import data_struct
from file_dataexch_hdf5 import write_h5,read
import matplotlib.pyplot as plt

def reshape_SSRFh5(filepath:str,main_key:str="FPGA control board"):
    h5_file=h5py.File(filepath,'r')
    print(h5_file.filename)
    # for key in h5_file[main_key].keys():
    #     print(f'key:{key}')
    h5_data=h5_file.get(main_key)
    matrix_counts = np.array(h5_data['PMT counter'],dtype=np.float32)
    row_n,col_n=matrix_counts.shape
    print(f'Matrix with shape:{matrix_counts.shape}')
    matrix_ref=np.array(h5_data['PMT ref'],dtype=np.float32)
    pos_x=np.array(h5_data['positon 1 data'],dtype=np.float32)
    pos_y=np.array(h5_data['positon 2 data'],dtype=np.float32)
    # plot historm
    #plt.hist(matrix_counts)
    #interpolate 
    #interp_counts=interpolate.Rbf(pos_x,pos_y,matrix_counts,function='multiquadric')
    max_x,min_x=pos_x.max(),pos_x.min()
    max_y,min_y=pos_y.max(),pos_y.min()
    newpos_x=np.linspace(min_x,max_x,col_n)
    newpos_y=np.linspace(min_y,max_y,row_n)
    grid_X,grid_Y=np.meshgrid(newpos_x,newpos_y)
    # interpolate into new_data with shape(row_n,col_n) in a ordered position
    
    orderPMT_counts=griddata((pos_x.flatten(),pos_y.flatten()),matrix_counts.flatten(),(grid_X,grid_Y),method='cubic',fill_value=matrix_counts.mean())
    orderPMT_ref=griddata((pos_x.flatten(),pos_y.flatten()),matrix_ref.flatten(),(grid_X,grid_Y),method='cubic',fill_value=matrix_counts.mean())
    #plt.show()
    return h5_file[main_key],orderPMT_counts,orderPMT_ref

def DataExchange_HDF5(filename:str,data:dict,path:str=os.getcwd()):
    """create HDF5 file organized 
    in the DataExchange schema developed at Argonne National Laboratory.

    Args:
        filename (str): _description_
        data (dict): _description_
    """
    hdf5_file=os.path.join(path,filename+".hdf5")
    # data_struct.exchange.data=np.array([[[10, 11, 12], [13, 14, 15], [16, 17, 18]],
    #         [[20, 21, 22], [23, 24, 25], [26, 27, 28]],
    #         [[30, 31, 32], [33, 34, 35], [36, 37, 38]]])
    data_struct.exchange.data=np.array([[[10, 11, 12], [13, 14, 15], [16, 17, 18]],
                [[20, 21, 22], [23, 24, 25], [26, 27, 28]]])
    data_struct.exchange.x=np.arange(3)
    data_struct.exchange.x_units='um'
    data_struct.exchange.y=np.arange(3)
    data_struct.exchange.y_units='um'
    # energy
    data_struct.exchange.energy=[520,531]
    data_struct.exchange.energy_units='eV'
    write_h5(hdf5_file,data_struct)


def SSRF_h5toDataExcangeHDF5(input_h5file:str,data_struct:data_struct,save_path:str=os.getcwd(),main_key:str="FPGA control board"):
    """change the h5 file generated by SSRF08U1-STXM to DataExchange hdf5 format

    Args:
        input_h5file (str): _description_
        save_path (str, optional): _description_. Defaults to os.getcwd().
    """
    if os.path.isfile(input_h5file) and input_h5file.endswith('.h5') :
        # for new hdf5 save filename
        dir,file=os.path.split(input_h5file)
        filename,extension=os.path.splitext(file)
        savepath=save_path if os.path.isdir(save_path) else dir
        DEx_hdf5=os.path.join(savepath,filename+'_DEx.hdf5')
        print(f'converted hdf5 save to:{DEx_hdf5}')
        #acquire the h5 data
        SSRF_h5data,PMT_counts,PMT_ref=reshape_SSRFh5(input_h5file)
        # h5_file=h5py.File(input_h5file,'r')
        # PMT_counts=SSRF_h5data['PMT counter']
        # PMT_ref=SSRF_h5data['PMT ref']
        # row and column
        row,col=PMT_ref.shape
        print(f'data shape:{row}*{col}')
        

        Position_x=SSRF_h5data['positon 1 data']
        Position_y=SSRF_h5data['positon 2 data']
        energy=SSRF_h5data['energy(eV)']
        xy_stepsize=SSRF_h5data['step size(um)']
        x_lines=SSRF_h5data['line count']
        y_pixels=SSRF_h5data['pixel count']
        collect_time=SSRF_h5data['collect time']
        xy_range=SSRF_h5data['range(um)']

        print(f'xy range:{xy_range[0]}um x {xy_range[1]}um')
        # save to data struct form
        stack_data=np.zeros((row,col,2))
        stack_data[:,:,0]=PMT_counts
        stack_data[:,:,1]=PMT_ref
        print(stack_data.shape)
        data_struct.exchange.data=stack_data
        #data_struct.exchange.dark_data=PMT_ref
        data_struct.exchange.energy=[703,704]
        data_struct.exchange.x=Position_x
        data_struct.exchange.y=Position_y
        # data_struct.exchange.x=np.arange(row,dtype=np.int32)
        # data_struct.exchange.y=np.arange(col,dtype=np.int32)
        data_struct.exchange.title="PMT counts"
        data_struct.exchange.comment="SSRF-BL08U1_STXM"
        data_struct.exchange.energy_units='eV'
        data_struct.exchange.x_units='um'
        data_struct.exchange.y_units='um'
        # information part
        data_struct.information.facility.name='SSRF'
        data_struct.information.facility.beamline='BL08U1'
        data_struct.information.file_creation_datetime=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        data_struct.information.sample.description='SampleonSiN'
        # pixel size
        data_struct.pixel_size.horizontal=xy_stepsize[0]
        data_struct.pixel_size.horizontal_units='um'
        data_struct.pixel_size.vertical=xy_stepsize[1]
        data_struct.pixel_size.vertical_units='um'

        # write hdf5 file
        write_h5(DEx_hdf5,data_struct)
        return DEx_hdf5

def SSRF_h5ToDualEnergyHDF5(H5_preE:str,H5_mainE:str,data_struct:data_struct,save_path:str=os.getcwd(),namestr:str='_Dual'):
    """change the h5 file generated by SSRF08U1-STXM to DataExchange hdf5 format

    Args:
        input_h5file (str): _description_
        save_path (str, optional): _description_. Defaults to os.getcwd().
    """
    if os.path.isfile(H5_preE) and H5_preE.endswith('.h5') and os.path.isfile(H5_mainE) and H5_mainE.endswith('.h5'):
        # for new hdf5 save filename
        dir,file=os.path.split(H5_preE)
        filename,extension=os.path.splitext(file)
        savepath=save_path if os.path.isdir(save_path) else dir
        Dual_hdf5=os.path.join(savepath,filename+namestr+'.hdf5')
        print(f'converted hdf5 save to:{Dual_hdf5}')
        #acquire the h5 data
        preE_h5data,PMT_counts_preE,PMT_ref_preE=reshape_SSRFh5(H5_preE)
        mainE_h5data,PMT_counts_mainE,PMT_ref_mainE=reshape_SSRFh5(H5_mainE)

        # row and column
        row,col=PMT_ref_preE.shape
        print(f'preE data shape:{row}*{col}')
        # energy
        energy_preE=preE_h5data['energy(eV)']
        energy_mainE=mainE_h5data['energy(eV)']
        # use position at preE
        Position_x=preE_h5data['positon 1 data']
        Position_y=preE_h5data['positon 2 data']
        
        xy_stepsize=preE_h5data['step size(um)']
        x_lines=preE_h5data['line count']
        y_pixels=preE_h5data['pixel count']
        collect_time=preE_h5data['collect time']
        xy_range=preE_h5data['range(um)']

        print(f'xy range:{xy_range[0]}um x {xy_range[1]}um')
        # save to data struct form
        stack_data=np.zeros((row,col,2))
        stack_data[:,:,0]=PMT_counts_preE
        stack_data[:,:,1]=PMT_counts_mainE
        print(stack_data.shape)
        data_struct.exchange.data=stack_data
        #data_struct.exchange.dark_data=PMT_ref
        data_struct.exchange.energy=[energy_preE,energy_mainE]
        data_struct.exchange.x=Position_x
        data_struct.exchange.y=Position_y
        # data_struct.exchange.x=np.arange(row,dtype=np.int32)
        # data_struct.exchange.y=np.arange(col,dtype=np.int32)
        data_struct.exchange.title="PMT counts"
        data_struct.exchange.comment="SSRF-BL08U1_STXM"
        data_struct.exchange.energy_units='eV'
        data_struct.exchange.x_units='um'
        data_struct.exchange.y_units='um'
        # information part
        data_struct.information.facility.name='SSRF'
        data_struct.information.facility.beamline='BL08U1'
        data_struct.information.file_creation_datetime=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        data_struct.information.sample.description='SampleonSiN'
        # pixel size
        data_struct.pixel_size.horizontal=xy_stepsize[0]
        data_struct.pixel_size.horizontal_units='um'
        data_struct.pixel_size.vertical=xy_stepsize[1]
        data_struct.pixel_size.vertical_units='um'

        # write hdf5 file
        write_h5(Dual_hdf5,data_struct)
        return Dual_hdf5


class data:
    def __init__(self, data_struct):
        self.data_struct = data_struct
        self.i0_dwell = None
        self.i0data = np.zeros(1)
        self.n_ev = 0
        self.n_theta = 0
        self.shifts = []
        self.stack4D = None

if __name__=="__main__":
    test_h5=os.path.abspath("h5_data\\SF20221202061732.h5")
    print(test_h5)
    #DataExchange_HDF5('test_1energy',data={})
    # converted_hdf5=SSRF_h5toDataExcangeHDF5(test_h5,data_struct)
    # data_stack=data(data_struct)
    # read(converted_hdf5,data_stack)
    # dual energy
    preE_h5file=os.path.abspath("h5_data\\dual_energy\\SF20230115233909.h5")
    mid_h5file=os.path.abspath("h5_data\\dual_energy\\SF20230115232535.h5")
    mainE_h5file=os.path.abspath("h5_data\\dual_energy\\SF20230115232937.h5")
    SSRF_h5ToDualEnergyHDF5(preE_h5file,mainE_h5file,data_struct,save_path='',namestr='_1318-1331eV')
    SSRF_h5ToDualEnergyHDF5(preE_h5file,mid_h5file,data_struct,save_path='',namestr='_1318-1327eV')

    #reshape_SSRFh5(mainE_h5file)


